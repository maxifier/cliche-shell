package com.maxifier.cliche;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.List;

/**
 * @author aleksey.didik@maxifier.com (Aleksey Didik)
 */
public final class HTMLGenerator {

    //it's static methods only class
    private HTMLGenerator() {}

    public static String generate(Shell shell, String fileName, boolean includePrefixed) throws IOException {
        final String HTML_FORMAT = "<html><head><title>Auto-generated command reference file</title></head>" +
                "<body>\n" +
                "<h1>%1$s Command Reference</h1>\n" +
                "<em>Auto-generated by the <a href=\"" + "\">Cliche Shell</a></em>\n" +
                "%2$s</body></html>";

        List<MethodShellCommand> commands = shell.getCommandTable().getCommandTable();
        StringBuilder commandsHTML = new StringBuilder();
        for (MethodShellCommand command : commands) {
            if (command.getPrefix().equals("")) {
                appendCommandHTML(commandsHTML, command);
            }
        }
        if (includePrefixed) {
            for (MethodShellCommand command : commands) {
                if (!command.getPrefix().equals("")) {
                    appendCommandHTML(commandsHTML, command);
                }
            }
        }

        String html = String.format(HTML_FORMAT, htmlEncode(shell.getAppName()), commandsHTML);

        File file = new File(fileName);
        OutputStreamWriter w = new FileWriter(file);
        try {
            w.write(html);
        } finally {
            w.close();
        }
        return file.getAbsolutePath();
    }

    private static void appendCommandHTML(StringBuilder commandsHTML, MethodShellCommand command) {

        final String COMMAND_FORMAT = "<h2>%2$s <small>%3$s</small></h2>\n" +
                "<p><strong>abbrev:</strong> <big>%1$s</big></p>\n" +
                "<p>%4$s</p>\n" +
                "<table>\n" +
                "<tr><th>parameter</th><th>type</th><th>description</th></tr>\n" +
                "%5$s" +
                "</table>\n";
        final String PARAM_FORMAT = "<tr><td><strong>%1$s</strong></td><td>%2$s</td><td>%3$s</td></tr>\n";

        StringBuilder paramsHTML = new StringBuilder();
        ShellCommandParamSpec[] paramSpecs = command.getParamSpecs();
        for (ShellCommandParamSpec ps : paramSpecs) {
            paramsHTML.append(String.format(PARAM_FORMAT,
                    htmlEncode(ps.getName()),
                    htmlEncode(ps.getValueClass().getSimpleName()),
                    htmlEncode(ps.getDescription())));
        }

        commandsHTML.append(String.format(COMMAND_FORMAT,
                htmlEncode(command.getPrefix() + command.getAbbreviation()),
                htmlEncode(command.getPrefix() + command.getName()),
                htmlEncode(HelpCommandHandler.formatCommandParamsShort(command)),
                htmlEncode(command.getDescription()),
                paramsHTML));
    }
    private static String htmlEncode(String s) {
        return s; // for now it's app developer's responsibility to ensure html-compatibility of the strings.
        // Quick and dirty. But there's no htmlEncode in the JDK,
        // and Jakarta Commons is no good in case of Cliche: there be no dependendencies!
    }
}
